--[[
vi:syntax=lua
--]]

conky.config = {
  background = true,
  update_interval = 1.5,
  text_buffer_size = 1024,
  total_run_times = 0,


  alignment = 'bottom_left',
  gap_x = 5,
  gap_y = 1,

  own_window=false,
  own_window_type="desktop",
  minimum_width=1920,

  use_xft = true,
  font = 'Droid Sans Mono:size=8',
  xftalpha = 1,
  override_utf8_locale = true,

  imlib_cache_size = 60,
  double_buffer = true,
  draw_shades = false,
  default_shade_color = '#777777',

  short_units = true,
  border_inner_margin = 0,
  border_outer_margin = 0,
  uppercase = false,
  use_spacer = "right",

  draw_outline = false,
  draw_borders = false,
  draw_graph_borders = true,
  border_width = 0,

  out_to_console = false,

  top_name_width = 10,

  default_color = '#93a1a1',
  default_outline_color = '#657b83',

  pad_percents = 4,

};

options = {
  graph_size = "10,50",
  show_uptime = true,
  network_cards = {}
}

colors = {
  yellow = "b58900",
  orange = "cb4b16",
  red = "dc322f",
  blue = "268bd2",
  green = "859900",
  magenta = "6c71c4"
}

function colored(text, color)
  return "${color " .. colors[color] .."}" .. text .. "${color}"
end

function uncolored(text)
  return "${color}" .. text
end

function separator(separator)
  if not separator then
    separator = "|"
  end
  return colored(" " .. separator .. " ", "magenta")
end

function label(label, separator)
  out = colored(label .. ": ", "magenta")
  return out
end

function graph(graph)
  size = "10,40"
  if options.graph_size then
    size = options.graph_size
  end
  return string.format("${" .. graph .. "}", size)
end

function uptime(color)
  return colored("$uptime", color)
end

function sysload(color)
  return colored("$loadavg " .. graph("loadgraph %s"), "yellow")
end

function cpu(color)
  out = "${cpu}% " .. graph("cpugraph cpu0 %s")
  out = out .. " ${top name 1}${top cpu 1}"
  return colored(out, color)
end

function io(color)
  out = "${diskio_read} ${diskio_write} " .. graph("diskiograph %s")
  out = out .. " ${top_io name 1}"
  return colored(out, color)
end

function mem(color)
  out = colored("${mem} / ", color) .. uncolored("${memmax} ")
  out = out .. colored(graph("memgraph %s"), color)
  out = out .. colored(" ${top_mem name 1}${top_mem mem 1}", color)
  return  out
end

function network(card, color)
  out = label(card) .. colored("${addr " .. card .. "}", color)
  out = out .. "${if_match \"${addr " .. card .. "}\" != \"No Address\"}"
  upspeed = string.format("${upspeed %s} ${upspeedgraph %s 10,30}", card, card)
  downspeed = string.format("${downspeed %s} ${downspeedgraph %s 10,30}", card, card)
  out = out .. label(" u") .. colored(upspeed, color)
  out = out .. label(" d") .. colored(downspeed, color)
  out = out .. "${endif}"
  return out
end

function conky_bar()
  out = ""
  if options.show_uptime then
    out = out .. label("uptime") .. uptime("yellow") .. separator()
  end
  out = out .. label("load") .. sysload("yellow") .. separator()
  out = out .. label("cpu") .. cpu("orange") .. separator()
  out = out .. label("io") .. io("blue") .. separator()
  out = out .. label("mem") .. mem("red")
  for i = 1, #options.network_cards do
    out = separaator() .. out .. network(options.network_cards[i], "green")
  end
  return out
end

conky.text = conky_bar()

